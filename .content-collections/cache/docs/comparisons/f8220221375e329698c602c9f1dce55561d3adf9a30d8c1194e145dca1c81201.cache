{"content":"## Nextra\n\nFumadocs is highly inspired by Nextra. For example, the Routing Conventions. That is why\n`meta.json` also exists in Fumadocs.\n\nNextra is more opinionated than Fumadocs. Fumadocs is accelerated by App Router. As a result, It provides many server-side functions, and you have to\nconfigure things manually compared to simply editing a configuration file.\n\nFumadocs works great if you want more control over everything, such as\nadding it to an existing codebase or implementing advanced routing.\n\n### Feature Table\n\n| Feature             | Fumadocs     | Nextra                    |\n| ------------------- | ------------ | ------------------------- |\n| Static Generation   | Yes          | Yes                       |\n| Cached              | Yes          | Yes                       |\n| Light/Dark Mode     | Yes          | Yes                       |\n| Syntax Highlighting | Yes          | Yes                       |\n| Table of Contents   | Yes          | Yes                       |\n| Full-text Search    | Yes          | Yes                       |\n| i18n                | Yes          | Yes                       |\n| Last Git Edit Time  | Yes          | Yes                       |\n| Page Icons          | Yes          | Yes, via `_meta.js` files |\n| RSC                 | Yes          | Yes                       |\n| Remote Source       | Yes          | Yes                       |\n| SEO                 | Via Metadata | Yes                       |\n| Built-in Components | Yes          | Yes                       |\n| RTL Layout          | Yes          | Yes                       |\n\n### Additional Features\n\nFeatures supported via 3rd party libraries like [TypeDoc](https://typedoc.org) will not be listed here.\n\n| Feature                    | Fumadocs | Nextra |\n| -------------------------- | -------- | ------ |\n| OpenAPI Integration        | Yes      | No     |\n| TypeScript Docs Generation | Yes      | No     |\n| TypeScript Twoslash        | Yes      | Yes    |\n\n## Mintlify\n\nMintlify is a documentation service, as compared to Fumadocs, it offers a free tier but isn't completely free and open source.\n\nFumadocs is not as powerful as Mintlify, for example, the OpenAPI integration of Mintlify.\nAs the creator of Fumadocs, I wouldn't recommend switching to Fumadocs from Mintlify if you're satisfied with the current way you build docs.\nHowever, I believe Fumadocs is a suitable tool for all Next.js developers who want to have elegant docs.\n\n## Docusaurus\n\nDocusaurus is a powerful framework based on React.js. It offers many cool\nfeatures with plugins and custom themes.\n\n### Better DX\n\nSince Fumadocs is built on the top of Next.js, you'll have to start the Next.js dev\nserver every time to review changes, and initial boilerplate code is relatively more\ncompared to Docusaurus.\n\nFor a simple docs, Docusaurus might be a better choice if you don't need any Next.js specific functionality.\n\nHowever, when you want to use Next.js, or seek extra customizability like tuning default UI components, Fumadocs could be a better choice.\n\n### Plugins\n\nYou can easily achieve many things with plugins, their ecosystem is indeed larger and maintained by many contributors.\n\nIn comparison, the flexibility of Fumadocs allows you to implement them on your own, it may take longer to tune it to your satisfaction.","title":"Comparisons","description":"How is Fumadocs different from other existing frameworks?","icon":"GitCompareArrows","index":false,"_meta":{"filePath":"comparisons.mdx","fileName":"comparisons.mdx","directory":".","extension":"mdx","path":"comparisons"},"toc":[{"title":"Nextra","url":"#nextra","depth":2},{"title":"Feature Table","url":"#feature-table","depth":3},{"title":"Additional Features","url":"#additional-features","depth":3},{"title":"Mintlify","url":"#mintlify","depth":2},{"title":"Docusaurus","url":"#docusaurus","depth":2},{"title":"Better DX","url":"#better-dx","depth":3},{"title":"Plugins","url":"#plugins","depth":3}],"structuredData":{"contents":[{"heading":"nextra","content":"Fumadocs is highly inspired by Nextra. For example, the Routing Conventions. That is why\nmeta.json also exists in Fumadocs."},{"heading":"nextra","content":"Nextra is more opinionated than Fumadocs. Fumadocs is accelerated by App Router. As a result, It provides many server-side functions, and you have to\nconfigure things manually compared to simply editing a configuration file."},{"heading":"nextra","content":"Fumadocs works great if you want more control over everything, such as\nadding it to an existing codebase or implementing advanced routing."},{"heading":"feature-table","content":"Feature"},{"heading":"feature-table","content":"Fumadocs"},{"heading":"feature-table","content":"Nextra"},{"heading":"feature-table","content":"Static Generation"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Cached"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Light/Dark Mode"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Syntax Highlighting"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Table of Contents"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Full-text Search"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"i18n"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Last Git Edit Time"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Page Icons"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes, via _meta.js files"},{"heading":"feature-table","content":"RSC"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Remote Source"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"SEO"},{"heading":"feature-table","content":"Via Metadata"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Built-in Components"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"RTL Layout"},{"heading":"feature-table","content":"Yes"},{"heading":"feature-table","content":"Yes"},{"heading":"additional-features","content":"Features supported via 3rd party libraries like TypeDoc will not be listed here."},{"heading":"additional-features","content":"Feature"},{"heading":"additional-features","content":"Fumadocs"},{"heading":"additional-features","content":"Nextra"},{"heading":"additional-features","content":"OpenAPI Integration"},{"heading":"additional-features","content":"Yes"},{"heading":"additional-features","content":"No"},{"heading":"additional-features","content":"TypeScript Docs Generation"},{"heading":"additional-features","content":"Yes"},{"heading":"additional-features","content":"No"},{"heading":"additional-features","content":"TypeScript Twoslash"},{"heading":"additional-features","content":"Yes"},{"heading":"additional-features","content":"Yes"},{"heading":"mintlify","content":"Mintlify is a documentation service, as compared to Fumadocs, it offers a free tier but isn't completely free and open source."},{"heading":"mintlify","content":"Fumadocs is not as powerful as Mintlify, for example, the OpenAPI integration of Mintlify.\nAs the creator of Fumadocs, I wouldn't recommend switching to Fumadocs from Mintlify if you're satisfied with the current way you build docs.\nHowever, I believe Fumadocs is a suitable tool for all Next.js developers who want to have elegant docs."},{"heading":"docusaurus","content":"Docusaurus is a powerful framework based on React.js. It offers many cool\nfeatures with plugins and custom themes."},{"heading":"better-dx","content":"Since Fumadocs is built on the top of Next.js, you'll have to start the Next.js dev\nserver every time to review changes, and initial boilerplate code is relatively more\ncompared to Docusaurus."},{"heading":"better-dx","content":"For a simple docs, Docusaurus might be a better choice if you don't need any Next.js specific functionality."},{"heading":"better-dx","content":"However, when you want to use Next.js, or seek extra customizability like tuning default UI components, Fumadocs could be a better choice."},{"heading":"plugins","content":"You can easily achieve many things with plugins, their ecosystem is indeed larger and maintained by many contributors."},{"heading":"plugins","content":"In comparison, the flexibility of Fumadocs allows you to implement them on your own, it may take longer to tune it to your satisfaction."}],"headings":[{"id":"nextra","content":"Nextra"},{"id":"feature-table","content":"Feature Table"},{"id":"additional-features","content":"Additional Features"},{"id":"mintlify","content":"Mintlify"},{"id":"docusaurus","content":"Docusaurus"},{"id":"better-dx","content":"Better DX"},{"id":"plugins","content":"Plugins"}]},"body":"var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var i in e)r(n,i,{get:e[i],enumerable:!0})},l=(n,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of p(e))!f.call(n,d)&&d!==i&&r(n,d,{get:()=>e[d],enumerable:!(c=m(e,d))||c.enumerable});return n};var Y=(n,e,i)=>(i=n!=null?u(y(n)):{},l(e||!n||!n.__esModule?r(i,\"default\",{value:n,enumerable:!0}):i,n)),x=n=>l(r({},\"__esModule\",{value:!0}),n);var h=g((v,o)=>{o.exports=_jsx_runtime});var F={};b(F,{default:()=>a});var t=Y(h());function s(n){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"nextra\",children:\"Nextra\"}),`\n`,(0,t.jsxs)(e.p,{children:[`Fumadocs is highly inspired by Nextra. For example, the Routing Conventions. That is why\n`,(0,t.jsx)(e.code,{children:\"meta.json\"}),\" also exists in Fumadocs.\"]}),`\n`,(0,t.jsx)(e.p,{children:`Nextra is more opinionated than Fumadocs. Fumadocs is accelerated by App Router. As a result, It provides many server-side functions, and you have to\nconfigure things manually compared to simply editing a configuration file.`}),`\n`,(0,t.jsx)(e.p,{children:`Fumadocs works great if you want more control over everything, such as\nadding it to an existing codebase or implementing advanced routing.`}),`\n`,(0,t.jsx)(e.h3,{id:\"feature-table\",children:\"Feature Table\"}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Feature\"}),(0,t.jsx)(e.th,{children:\"Fumadocs\"}),(0,t.jsx)(e.th,{children:\"Nextra\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Static Generation\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Cached\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Light/Dark Mode\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Syntax Highlighting\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Table of Contents\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Full-text Search\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"i18n\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Last Git Edit Time\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Page Icons\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsxs)(e.td,{children:[\"Yes, via \",(0,t.jsx)(e.code,{children:\"_meta.js\"}),\" files\"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"RSC\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Remote Source\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"SEO\"}),(0,t.jsx)(e.td,{children:\"Via Metadata\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Built-in Components\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"RTL Layout\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]})]})]}),`\n`,(0,t.jsx)(e.h3,{id:\"additional-features\",children:\"Additional Features\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Features supported via 3rd party libraries like \",(0,t.jsx)(e.a,{href:\"https://typedoc.org\",children:\"TypeDoc\"}),\" will not be listed here.\"]}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Feature\"}),(0,t.jsx)(e.th,{children:\"Fumadocs\"}),(0,t.jsx)(e.th,{children:\"Nextra\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"OpenAPI Integration\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"No\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"TypeScript Docs Generation\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"No\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"TypeScript Twoslash\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"Yes\"})]})]})]}),`\n`,(0,t.jsx)(e.h2,{id:\"mintlify\",children:\"Mintlify\"}),`\n`,(0,t.jsx)(e.p,{children:\"Mintlify is a documentation service, as compared to Fumadocs, it offers a free tier but isn't completely free and open source.\"}),`\n`,(0,t.jsx)(e.p,{children:`Fumadocs is not as powerful as Mintlify, for example, the OpenAPI integration of Mintlify.\nAs the creator of Fumadocs, I wouldn't recommend switching to Fumadocs from Mintlify if you're satisfied with the current way you build docs.\nHowever, I believe Fumadocs is a suitable tool for all Next.js developers who want to have elegant docs.`}),`\n`,(0,t.jsx)(e.h2,{id:\"docusaurus\",children:\"Docusaurus\"}),`\n`,(0,t.jsx)(e.p,{children:`Docusaurus is a powerful framework based on React.js. It offers many cool\nfeatures with plugins and custom themes.`}),`\n`,(0,t.jsx)(e.h3,{id:\"better-dx\",children:\"Better DX\"}),`\n`,(0,t.jsx)(e.p,{children:`Since Fumadocs is built on the top of Next.js, you'll have to start the Next.js dev\nserver every time to review changes, and initial boilerplate code is relatively more\ncompared to Docusaurus.`}),`\n`,(0,t.jsx)(e.p,{children:\"For a simple docs, Docusaurus might be a better choice if you don't need any Next.js specific functionality.\"}),`\n`,(0,t.jsx)(e.p,{children:\"However, when you want to use Next.js, or seek extra customizability like tuning default UI components, Fumadocs could be a better choice.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"plugins\",children:\"Plugins\"}),`\n`,(0,t.jsx)(e.p,{children:\"You can easily achieve many things with plugins, their ecosystem is indeed larger and maintained by many contributors.\"}),`\n`,(0,t.jsx)(e.p,{children:\"In comparison, the flexibility of Fumadocs allows you to implement them on your own, it may take longer to tune it to your satisfaction.\"})]})}function a(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(s,{...n})}):s(n)}return x(F);})();\n;return Component;"}